interface Fragment {
	id: ID!
	author: String
	createdAt: Int!
	lastUpdated: Int
}

type Gallery {
	id: ID!
	name: String!
	images: [ID]!
}

type Image implements Fragment {
	id: ID!
	author: String
	createdAt: Int!
	lastUpdated: Int
	gallery: String!
	paths: [ImagePath!]!
	filename: String!
}

input ImageInput {
	gallery: String!
	paths: [ImagePathInput!]!
	filename: String!
}

type ImagePath {
	path: String!
	type: String!
}

input ImagePathInput {
	path: String!
	type: String!
}

type Menu {
	id: ID!
	name: String!
	items: [MenuItem!]!
}

input MenuInput {
	name: String!
	items: [MenuItemInput]
}

type MenuItem {
	name: String!
	href: String
	items: [MenuItem]
}

input MenuItemInput {
	id: ID
	name: String!
	href: String
	items: [MenuItemInput]
}

type Mutation {
	putText(text: String!, is_rich: Boolean): Text
	updateText(text: String, id: ID!): Text
	removeText(id: ID!): Text
	addGallery(name: String!): Gallery
	removeGallery(id: ID!): Gallery
	addImageToGallery(image_id: ID!, id: ID!): Gallery
	addImagesToGallery(image_ids: [ID]!, id: ID!): Gallery
	removeImageFromGallery(image_number: Int!, id: ID!): Gallery
	reorderImagesInGallery(image_ids: [ID]!, id: ID!): Gallery
	addImage(input: ImageInput): Image
	removeImage(id: ID!): Image
	putMenu(menu: MenuInput!, id: ID): Menu
}

type Query {
	getText(id: ID!): Text
	getTextList: [Text]
	getImage(id: ID!): Image
	getMenu(id: ID!): Menu
	getGallery(id: ID!): Gallery
	getGalleryList: [Gallery]
	getGalleryListId: [ID]
	getImageList: [Image]
}

type Text implements Fragment {
	id: ID!
	author: String
	createdAt: Int!
	lastUpdated: Int
	text: String!
	is_rich: Boolean
}

schema {
	query: Query
	mutation: Mutation
}