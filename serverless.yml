service:
  name: serverless-cms-dev

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-stack-output
custom:
  output:
    file: ./stack.yml
    handler: scripts/client.handler

provider:
  name: aws
  runtime: nodejs6.10

  stage: dev
  region: us-west-2

functions:
  update_data:
    handler: functions/update-data.updateData
    role: updateDbRole
    events:
      - http:
          method: put
          path: fragment
          authorizer:
            arn:
              ${file(./user-data.yml):cognito_arn}
      - http:
          method: patch
          path: fragment/{id}
          authorizer:
            arn:
              ${file(./user-data.yml):cognito_arn}
      - http:
          method: delete
          path: fragment/{id}
          authorizer:
            arn:
              ${file(./user-data.yml):cognito_arn}

    environment:
      FRAGMENTS_TABLE: ${self:service}-fragments

  resize:
    handler: functions/resize-images.resizeImages

    role: resizeRole

    events:
      - s3:
          bucket: ${self:service}
          event: s3:ObjectCreated:*
          rules:
            - prefix: images/temp/
            - suffix: .jpg

    environment:
      BUCKET: ${self:service},
      IMG_TABLE: ${self:service}-images
      FRAGMENTS_TABLE: ${self:service}-fragments

  createPage:
    handler: functions/create-page.createPage
    role: createPageRole
    environment:
      BUCKET: ${self:service}
      IMG_TABLE: ${self:service}-images
      PAGES_TABLE: ${self:service}-pages
      MENUS_TABLE: ${self:service}-menus


resources:
  Resources:
    resizeRole: ${file(./settings/roles/resizeRole.yml)}
    createPageRole: ${file(./settings/roles/createPageRole.yml)}
    updateDbRole: ${file(./settings/roles/updateDbRole.yml)}

    imagesTable: ${file(./settings/tables.yml):imagesTable}
    pagesTable: ${file(./settings/tables.yml):pagesTable}
    menusTable: ${file(./settings/tables.yml):menusTable}
    fragmentsTable: ${file(./settings/tables.yml):fragmentsTable}
    userPool:  ${file(./settings/auth/user-pool.yml)}
    userPoolGroup: ${file(./settings/auth/user-pool-group.yml)}
    userPoolClient: ${file(./settings/auth/user-pool-client.yml)}

  Outputs:
    region:
      Value:
        Ref: "AWS::Region"
    CognitoARN:
      Value:
        Fn::GetAtt: ["userPool", "Arn"]
    userPoolId:
      Value:
        Ref: userPool
    userPoolWebClientId:
      Value:
        Ref: userPoolClient
