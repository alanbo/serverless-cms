service:
  name: serverless-testing-site

# Add the serverless-webpack plugin
plugins:
  - serverless-webpack
  - serverless-stack-output
custom:
  output:
    file: ./stack.yml
    handler: scripts/client.handler

provider:
  name: aws
  runtime: nodejs8.10

  stage: dev
  region: us-west-2

functions:
  update_data:
    handler: functions/update-data.updateData
    role: updateDbRole
    events:
      - http:
          method: put
          path: fragment
          authorizer: aws_iam
          cors: true
      - http:
          method: patch
          path: fragment/{id}
          authorizer: aws_iam
          cors: true
      - http:
          method: delete
          path: fragment/{id}
          authorizer: aws_iam
          cors: true

    environment:
      FRAGMENTS_TABLE: ${self:service}-fragments

  resize:
    handler: functions/resize-images.resizeImages
    role: resizeRole

    environment:
      BUCKET: ${self:service}
      IMG_TABLE: ${self:service}-images
      FRAGMENTS_TABLE: ${self:service}-fragments
      GRAPHQL:
        Fn::GetAtt: ["graphQLApi", "GraphQLUrl"]

  createPage:
    handler: functions/create-page.createPage
    role: createPageRole
    environment:
      BUCKET: ${self:service}
      IMG_TABLE: ${self:service}-images
      PAGES_TABLE: ${self:service}-pages
      MENUS_TABLE: ${self:service}-menus


resources:
  Resources:
    S3BucketPublicsite: ${file(./settings/s3/s3bucket.yml)}
    S3BucketPolicy: ${file(./settings/s3/s3bucketPolicy.yml)}
    ResizeLambdaPermissionPhotosS3: ${file(./settings/s3/s3permission.yml)}
    resizeRole: ${file(./settings/roles/resizeRole.yml)}
    createPageRole: ${file(./settings/roles/createPageRole.yml)}
    updateDbRole: ${file(./settings/roles/updateDbRole.yml)}
    dataEditorRole: ${file(./settings/roles/dataEditorRole.yml)}
    identityPoolRoleAttachment:  ${file(./settings/auth/identity-pool-role-attachment.yml)}
    fragmentsTable: ${file(./settings/tables.yml):fragmentsTable}

    userPool:  ${file(./settings/auth/user-pool.yml)}
    userPoolGroup: ${file(./settings/auth/user-pool-group.yml)}
    userPoolClient: ${file(./settings/auth/user-pool-client.yml)}

    identityPool:  ${file(./settings/auth/identity-pool.yml)}

    graphQLApi: ${file(./settings/graphql-api/graphql.yml)}
    graphQLSchema: ${file(./settings/graphql-api/graphql-schema.yml)}
    graphQLKey: ${file(./settings/graphql-api/graphql-key.yml)}
    graphQLData: ${file(./settings/graphql-api/graphql-datasource.yml)}
    graphQLDataImg: ${file(./settings/graphql-api/graphql-datasource-img.yml)}

    # needs to be commented out on first deploy
    putMenu: ${file(./settings/graphql-api/resolvers/putMenu.yml)}
    putText: ${file(./settings/graphql-api/resolvers/putText.yml)}
    addImage: ${file(./settings/graphql-api/resolvers/addImage.yml)}
    addGallery: ${file(./settings/graphql-api/resolvers/addGallery.yml)}
    
    addImageToGallery: ${file(./settings/graphql-api/resolvers/addImageToGallery.yml)}
    removeGallery: ${file(./settings/graphql-api/resolvers/removeGallery.yml)}
    removeImage: ${file(./settings/graphql-api/resolvers/removeImage.yml)}
    removeImageFromGallery: ${file(./settings/graphql-api/resolvers/removeImageFromGallery.yml)}
    getImageList: ${file(./settings/graphql-api/resolvers/getImageList.yml)}
    getGalleryList: ${file(./settings/graphql-api/resolvers/getImageList.yml)}
    # galleryImages: ${file(./settings/graphql-api/resolvers/gallery-images.yml)}
    
    getText: ${file(./settings/graphql-api/resolvers/getText.yml)}
    getMenu: ${file(./settings/graphql-api/resolvers/getMenu.yml)}
    getImage: ${file(./settings/graphql-api/resolvers/getImage.yml)}
    getGallery: ${file(./settings/graphql-api/resolvers/getGallery.yml)}



  Outputs:
    region:
      Value:
        Ref: "AWS::Region"
    CognitoARN:
      Value:
        Fn::GetAtt: ["userPool", "Arn"]
    userPoolId:
      Value:
        Ref: userPool
    userPoolWebClientId:
      Value:
        Ref: userPoolClient

    identityPoolId:
      Value:
        Ref: identityPool

    GraphQLUrl:
      Value:
        Fn::GetAtt: ["graphQLApi", "GraphQLUrl"]
    GraphQLARN:
      Value:
        Fn::GetAtt: ["graphQLApi", "Arn"]
    GraphQLApiId:
      Value:
        Fn::GetAtt: ["graphQLApi", "ApiId"]
    GraphQLApiKey:
      Value:
        Fn::GetAtt: ["graphQLKey", "ApiKey"]
    BucketName:
      Value: ${self:service}-public
